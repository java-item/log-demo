<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="300 seconds">
    <springProperty scope="context" name="logPath" source="logging.file.path"/>
    <contextName>log-demo-contextName</contextName>
    <!-- 设置日志文件名-->
    <property name="LOG_NAME" value="log_demo_async" />
    <!-- 最多保留30历史数据-->
    <property name="LOG_MAX_DAY_HISTORY" value="10" />
    <!--单个日志文件的最大大小-->
    <!--    <property name="LOG_FILE_MAX_SIZE" value="10MB" />-->
    <property name="LOG_FILE_MAX_SIZE" value="3KB" />
    <!-- 在有 maxHistory 的限制下，进一步限制所有日志文件大小之和的上限，超过则从最旧的日志开始删除-->
    <property name="LOG_TOTAL_SIZE_CAP" value="20MB" />


    <!-- 自定义变量，用于配置日志输出格式，这个格式是尽量偏向 spring boot 默认的输出风格
    %date：日期，默认格式 yyyy-MM-dd hhh:mm:ss,SSS 默认使用本机时区，通过 %d{yyyy-MM-dd hhh:mm:ss,SSS} 来自定义
    %-5level：5个占位符的日志级别，例如" info"、"error"
    %thread : 输出日志的线程
    %class : 输出日志的类的完全限定名，效率低
    %method : 输出日志的方法名
    %line : 输出日志的行号，效率低
    %msg : 日志消息内容
    %n : 换行
    -->
    <property name="LOG_PATTERN" value="%date %-5level --- [%thread] %class.%method/%line : %msg%n"/>
    <!-- 彩色日志格式 -->
    <property name="LOG_PATTERN_COLOURS" value="%date %green(%-5level) --- [%thread] %cyan(%class.%method/%line) : %msg%n"/>

    <!--日志输出器. ch.qos.logback.core.ConsoleAppender : 输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 配置日志输出格式 -->
            <pattern>${LOG_PATTERN_COLOURS}</pattern>
            <!-- 使用的字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志输出器。ch.qos.logback.core.rolling.RollingFileAppender : 滚动输出到文件 -->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 活动中的日志文件名(支持绝对和相对路径) -->
        <file>${logPath}/${LOG_NAME}.log</file>
        <!-- 滚动策略. ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy : 按照大小和时间滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 何时触发滚动，如何滚动，以及滚动文件的命名格式
            %d : 日期，默认格式 yyyy-MM-dd，通过 %d{yyyy-MM-dd hhh:mm:ss} 来自定义格式。logback 就是通过 %d 知道了触发滚动的时机
            %i : 单个滚动周期内的日志文件的序列号
            .zip : 将日志文件压缩成zip。不想压缩，可以使用.log 结尾
            如下每天0点以后的第一日志请求触发滚动，将前一天的日志打成 zip 压缩包存放在 logs/app1/backup 下，并命名为 app1_%d_%i.zip
            -->
            <fileNamePattern>${logPath}/${LOG_NAME}_%d{yyyy-MM-dd HH:mm}_%i.zip</fileNamePattern>
            <!--单个日志文件的最大大小-->
            <maxFileSize>${LOG_FILE_MAX_SIZE}</maxFileSize>
            <!--删除n个滚动周期之前的日志文件(最多保留前n个滚动周期的历史记录)-->
            <maxHistory>3</maxHistory>
            <!-- 在有 maxHistory 的限制下，进一步限制所有日志文件大小之和的上限，超过则从最旧的日志开始删除-->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 在只有设置为true并且 maxHistory 不为零才能起效-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <!-- 日志输出格式 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 使用的字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

<!--    &lt;!&ndash; 异步日志 &ndash;&gt;-->
<!--    <appender name="ASYNC-ROLLING" class="ch.qos.logback.classic.AsyncAppender">-->
<!--        &lt;!&ndash; 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 &ndash;&gt;-->
<!--        <discardingThreshold>0</discardingThreshold>-->
<!--        &lt;!&ndash; 更改默认的队列的深度,该值会影响性能.默认值为256 &ndash;&gt;-->
<!--        <queueSize>256</queueSize>-->
<!--        &lt;!&ndash; 添加附加的appender,最多只能添加一个 &ndash;&gt;-->
<!--        <appender-ref ref="ROLLING"/>-->
<!--    </appender>-->

    <!-- 根记录器 -->
    <root level="info">
        <!-- 使用 STDOUT、ROLLING 输出记录的日志-->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLING"/>
    </root>
</configuration>